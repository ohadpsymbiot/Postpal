"use strict";(self.webpackChunk_postman_app_renderer=self.webpackChunk_postman_app_renderer||[]).push([[122],{"./documentation/controllers/DocumentationContextBarController.js":function(t,e,i){i.r(e),i.d(e,{default:function(){return l}});var n,a=i("./documentation/stores/DocumentationContextBarStore.js"),o=i("../../node_modules/mobx/lib/mobx.module.js"),r=i("./js/stores/StoreManager.js"),s=i("./js/stores/EditorStore.js"),c=i("./js/stores/ActiveWorkspaceSessionStore.js");let l=(d=(n=class{constructor(){this.entityId=void 0,this.entityUid=void 0,this.entityType=void 0,this.owner=void 0,this.contextData=void 0,this.unsavedDescription=null,this.updateUnsavedDescription=t=>{this.unsavedDescription=t}}get store(){const t=(0,r.resolveStoreInstance)(c.default).activeEditor,e=(0,r.resolveStoreInstance)(s.default).find(t);if(e){const t="v2implview://stubView/",i=e.resource.replace(t,"").split("?")[0].split("/");if("api"===i[0]){const[t,e,n,o]=i;return new a.default(n,o,this.contextData)}{const[t,e]=i;return new a.default(t,e,this.contextData)}}return null}setContextData(t){this.contextData=t}willDestroy(){this.codegen=void 0}get contextBarUnsavedDescription(){return this.unsavedDescription}}).prototype,u="store",T=[o.computed],p=Object.getOwnPropertyDescriptor(n.prototype,"store"),O=n.prototype,I={},Object.keys(p).forEach((function(t){I[t]=p[t]})),I.enumerable=!!I.enumerable,I.configurable=!!I.configurable,("value"in I||I.initializer)&&(I.writable=!0),I=T.slice().reverse().reduce((function(t,e){return e(d,u,t)||t}),I),O&&void 0!==I.initializer&&(I.value=I.initializer?I.initializer.call(O):void 0,I.initializer=void 0),void 0===I.initializer&&(Object.defineProperty(d,u,I),I=null),n);var d,u,T,p,O,I},"./documentation/stores/DocumentationContextBarStore.js":function(t,e,i){i.r(e),i.d(e,{default:function(){return d}});var n,a,o=i("../../node_modules/mobx/lib/mobx.module.js"),r=i("./documentation/constants.js"),s=i("./documentation/stores/DocumentationMasterStore.js"),c=i("./js/services/NavigationService.js");function l(t,e,i,n,a){var o={};return Object.keys(n).forEach((function(t){o[t]=n[t]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=i.slice().reverse().reduce((function(i,n){return n(t,e,i)||i}),o),a&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(a):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(t,e,o),o=null),o}let d=((a=class{constructor(t,e,i){var n,a;this.entityType=t,this.entityUid=e,this.contextData=i;const o=c.default.getCurrentRouteParams(),r=null==o?void 0:o.apiId;this.apiId=(null==i||null===(n=i.parent)||void 0===n?void 0:n.id)||r,this.gitLinkedMode=null==i||null===(a=i.parent)||void 0===a?void 0:a.mode,this.masterStore=s.default.getInstance()}get isOffline(){return this.masterStore.isOffline}get isEditable(){return this.masterStore.isEditable}get activeEnvironmentVariables(){return this.masterStore.activeEnvironmentVariables}get isUserMemberOfActiveWorkspace(){return this.masterStore.isUserMemberOfActiveWorkspace}get entityData(){if(!this.entityType||this.entityType&&!r.DOCUMENTATION_ENTITY[this.entityType.toUpperCase()])return{isLoading:!1,error:null,data:null};let{data:t,status:e}=this.masterStore.getData({uid:this.entityUid,type:this.entityType,parentCollectionUid:this.contextData&&(this.contextData.parentCollectionUid||this.contextData.collectionUid),versionTag:r.DOCUMENTATION_LATEST_VERSION_STRING,apiId:this.apiId,gitLinkedMode:this.gitLinkedMode},{withPublishedData:!1,source:"contextBar"});return{isLoading:e===r.DOCUMENTATION_STATUS.LOADING,error:e===r.DOCUMENTATION_STATUS.ERROR,data:t}}get parentCollectionData(){if(this.entityType&&!r.DOCUMENTATION_ENTITY[this.entityType.toUpperCase()])return{isLoading:!1,error:null,data:null};const{data:t}=this.entityData;return this.entityType===r.DOCUMENTATION_ENTITY.COLLECTION?t:t?this.masterStore.getData({uid:this.contextData&&(this.contextData.parentCollectionUid||this.contextData.collectionUid),parentCollectionUid:this.contextData&&(this.contextData.parentCollectionUid||this.contextData.collectionUid),type:r.DOCUMENTATION_ENTITY.COLLECTION,versionTag:r.DOCUMENTATION_LATEST_VERSION_STRING,apiId:this.apiId,gitLinkedMode:this.gitLinkedMode},{source:"contextBar"}).data:void 0}isEntityLoading(t){return this.masterStore.loadingStateForEntity[t]}updateLoadingStateForEntity(t,e=!1){this.masterStore.updateLoadingStateForEntity(t,e)}async updateDescription(t){this.masterStore.updateLoadingStateForEntity(this.entityUid,!0),await this.masterStore.updateDescription({type:this.entityType,uid:this.entityUid,apiId:this.apiId,gitLinkedMode:this.gitLinkedMode,parentCollectionUid:this.contextData&&(this.contextData.parentCollectionUid||this.contextData.collectionUid)},t).then((()=>{this.masterStore.updateLoadingStateForEntity(this.entityUid,!1)}))}}).masterStoreGetMethod={[r.DOCUMENTATION_ENTITY.COLLECTION]:"getCollection",[r.DOCUMENTATION_ENTITY.FOLDER]:"getFolder",[r.DOCUMENTATION_ENTITY.REQUEST]:"getRequest"},l((n=a).prototype,"entityData",[o.computed],Object.getOwnPropertyDescriptor(n.prototype,"entityData"),n.prototype),l(n.prototype,"parentCollectionData",[o.computed],Object.getOwnPropertyDescriptor(n.prototype,"parentCollectionData"),n.prototype),n)},"./documentation/stores/DocumentationMasterStore.js":function(t,e,i){i.r(e),i.d(e,{default:function(){return P}});var n,a,o,r,s,c,l,d,u,T=i("../../node_modules/mobx/lib/mobx.module.js"),p=i("./js/stores/StoreManager.js"),O=i("./js/stores/CurrentUserStore.js"),I=i("./js/stores/SyncStatusStore.js"),E=i("./js/stores/ActiveWorkspaceStore.js"),h=i("./runtime-repl/environment/datastores/ActiveEnvironmentStore.js"),N=i("./collaboration/workspace/model/ActiveWorkspaceBaseStore.ts"),D=i("./documentation/constants.js"),f=i("./documentation/services/DocumentationService.js"),y=i("./runtime-repl/collection/_api/CollectionStoreV2.js"),S=i("./runtime-repl/folder/_api/FolderStoreV2.js"),_=i("./runtime-repl/request-http/_api/RequestStoreV2.js"),m=i("./runtime-repl/collection/_api/CollectionInterfaceV2.ts"),b=i("./runtime-repl/folder/_api/FolderInterfaceV2.ts"),A=i("./runtime-repl/request-http/_api/RequestInterfaceV2.ts"),C=i("./runtime-repl/collection/datastores/models/CollectionPermissions.js"),U=i("./documentation/utils/utils.js"),g=i("./api-dev/interfaces/APIInterface.js"),v=i("./runtime-repl/transient-collection/datastores/stores/TransientFolderStore.ts"),M=i("./runtime-repl/transient-collection/datastores/stores/TransientRequestStore.ts"),L=i("./js/utils/uid-helper.js"),w=i("./node_modules/lodash/lodash.js");function R(t,e,i,n){i&&Object.defineProperty(t,e,{enumerable:i.enumerable,configurable:i.configurable,writable:i.writable,value:i.initializer?i.initializer.call(n):void 0})}function k(t,e,i,n,a){var o={};return Object.keys(n).forEach((function(t){o[t]=n[t]})),o.enumerable=!!o.enumerable,o.configurable=!!o.configurable,("value"in o||o.initializer)&&(o.writable=!0),o=i.slice().reverse().reduce((function(i,n){return n(t,e,i)||i}),o),a&&void 0!==o.initializer&&(o.value=o.initializer?o.initializer.call(a):void 0,o.initializer=void 0),void 0===o.initializer&&(Object.defineProperty(t,e,o),o=null),o}let P=(u=class t{constructor(){R(this,"collections",a,this),R(this,"folders",o,this),R(this,"requests",r,this),R(this,"loadingStateForEntity",s,this),R(this,"collectionInstance",c,this),R(this,"environmentVariables",l,this),R(this,"loadingPublishedStateForEntity",d,this),this.isAPIOnBranch={}}static getInstance(){return void 0===t.instance&&(t.instance=new t),t.instance}get isOffline(){return!(0,p.resolveStoreInstance)(I.default).isSocketConnected}get isEditable(){const t=(0,p.resolveStoreInstance)(O.default).isLoggedIn;return!this.isOffline&&t}setEnvironmentVariable(t){this.environmentVariables=t}get activeEnvironmentVariables(){return this.environmentVariables||(0,p.resolveStoreInstance)(h.default).enabledValues}get isUserMemberOfActiveWorkspace(){return(0,p.resolveStoreInstance)(E.default).isMember}getData(t,e={withPublishedData:!1}){const{uid:i,parentCollectionUid:n,type:a,versionTag:o=D.DOCUMENTATION_LATEST_VERSION_STRING,apiId:r,gitLinkedMode:s}=t,c=this._findItem(t),{withPublishedData:l,source:d}=e;if(c&&c.status===D.DOCUMENTATION_STATUS.LOADING)return c;(!c||"contextBar"!==d||r&&s)&&(!c&&this._createInitialState({uid:i,type:a,versionTag:o}),o===D.DOCUMENTATION_LATEST_VERSION_STRING||(null==s?void 0:s.name)===D.DOCUMENTATION_MODE.VERSION&&r?this._fetchDataFromInterface({uid:i,parentCollectionUid:n,type:a,source:d,apiId:r,gitLinkedMode:s,versionTag:o}):this._fetchDataFromSync({uid:i,type:a,versionTag:o}));let u=c||this._findItem(t);return a===D.DOCUMENTATION_ENTITY.COLLECTION&&o===D.DOCUMENTATION_LATEST_VERSION_STRING&&l&&u&&!u.publishedData&&this._fetchPublishedData(i,{apiId:r}),u}_findItem(t){const{uid:e,type:i,versionTag:n=D.DOCUMENTATION_LATEST_VERSION_STRING}=t;switch(i){case D.DOCUMENTATION_ENTITY.COLLECTION:return this.collections[`${e}:${n}`];case D.DOCUMENTATION_ENTITY.FOLDER:return this.folders[`${e}:${n}`];case D.DOCUMENTATION_ENTITY.REQUEST:return this.requests[`${e}:${n}`];default:throw new TypeError(`DocumentationMasterStore~_findItem: unknown entity type - ${i}`)}}_createInitialState(t){const{uid:e,type:i,versionTag:n=D.DOCUMENTATION_LATEST_VERSION_STRING}=t;switch(i){case D.DOCUMENTATION_ENTITY.COLLECTION:this.collections[`${e}:${n}`]={status:D.DOCUMENTATION_STATUS.LOADING,data:void 0};break;case D.DOCUMENTATION_ENTITY.FOLDER:this.folders[`${e}:${n}`]={status:D.DOCUMENTATION_STATUS.LOADING,data:void 0};break;case D.DOCUMENTATION_ENTITY.REQUEST:this.requests[`${e}:${n}`]={status:D.DOCUMENTATION_STATUS.LOADING,data:void 0};break;default:throw new TypeError(`DocumentationMasterStore~_createInitialState: unknown entity type - ${i}`)}}async _fetchDataFromInterface(t){var e;if(t.apiId&&void 0===this.isAPIOnBranch[t.apiId]){const e=await(0,U.isAPIMigratedAndGitLinked)(t.gitLinkedMode,t.apiId);this.isAPIOnBranch[t.apiId]=e}t.apiId&&(this.isAPIOnBranch[t.apiId]||(null===(e=t.gitLinkedMode)||void 0===e?void 0:e.name)===D.DOCUMENTATION_MODE.VERSION)?await this._fetchDataFromADPInterface(t):await this._fetchDataFromRuntimeInterface(t)}async _fetchDataFromADPInterface(t){const{uid:e,parentCollectionUid:i,type:n,apiId:a,gitLinkedMode:o,versionTag:r}=t,s={...t,versionTag:r};this._updateStatus(s,D.DOCUMENTATION_STATUS.LOADING);try{let t;switch(this.collectionInstance[i]=await(0,g.getAPILinkedEntityModel)(a,o,D.DOCUMENTATION_ENTITY.COLLECTION,i),n){case D.DOCUMENTATION_ENTITY.COLLECTION:var c;t=null===(c=this.collectionInstance[i])||void 0===c?void 0:c.model;break;case D.DOCUMENTATION_ENTITY.FOLDER:{const n=await this.collectionInstance[i].getFolder(e);t=null==n?void 0:n.model;break}case D.DOCUMENTATION_ENTITY.REQUEST:{const n=await this.collectionInstance[i].getRequest(e);t=null==n?void 0:n.model;break}default:throw new TypeError(`DocumentationMasterStore~_fetchDataFromADPInterface: unknown entity type - ${n}`)}t||pm.logger.error("DocumentationMasterStore~_fetchDataFromADPInterface: No data found for given entity"),this._updateData(s,t),this._updateStatus(s,D.DOCUMENTATION_STATUS.DATA_FETCHED)}catch(t){pm.logger.error("~_fetchDataFromADPInterface: Unable to fetch data",t),this._updateStatus(s,D.DOCUMENTATION_STATUS.ERROR)}}async _fetchDataFromRuntimeInterface(t){const{uid:e,parentCollectionUid:i,type:n}=t,a={...t,versionTag:D.DOCUMENTATION_LATEST_VERSION_STRING};this._updateStatus(a,D.DOCUMENTATION_STATUS.LOADING);try{let o,r;const s=y.getOne;switch(n){case D.DOCUMENTATION_ENTITY.COLLECTION:"contextBar"===t.source&&(r=["response","request"]),o=await s(e,{permissions:[C.CollectionPermissionConstants.PUBLISH,C.CollectionPermissionConstants.EDIT],exclude:r});break;case D.DOCUMENTATION_ENTITY.FOLDER:"contextBar"===t.source&&(r=["response","request"]),o=await(0,S.getOne)(e,i,{exclude:r});break;case D.DOCUMENTATION_ENTITY.REQUEST:"contextBar"===t.source&&(r=["response"]),o=await(0,_.getOne)(e,i,{exclude:r});break;default:throw new TypeError(`DocumentationMasterStore~_fetchDataFromRuntimeInterface: unknown entity type - ${n}`)}this._updateData(a,o),this._updateStatus(a,D.DOCUMENTATION_STATUS.DATA_FETCHED)}catch(t){pm.logger.error("~_fetchDataFromRuntimeInterface: Unable to fetch data",t),this._updateStatus(a,D.DOCUMENTATION_STATUS.ERROR)}}async _fetchDataFromSync(t){const{uid:e,type:i,versionTag:n}=t;if(this._updateStatus(t,D.DOCUMENTATION_STATUS.LOADING),this.isOffline)this._updateStatus(t,D.DOCUMENTATION_STATUS.DATA_NOT_AVAILABLE_OFFLINE);else try{const[a,...o]=e.split("-"),r=o.join("-"),s=(await(0,f.fetchData)(i,r,a,{populate:!0,versionTag:n})).body.data,c=this._transformData(s,i);this._updateData(t,c),this._updateStatus(t,D.DOCUMENTATION_STATUS.DATA_FETCHED)}catch(e){pm.logger.error("~_fetchDataFromSync: Unable to fetch data from sync",e),this._updateStatus(t,D.DOCUMENTATION_STATUS.ERROR)}}async _fetchPublishedData(t,e={}){try{if(this.loadingPublishedStateForEntity[t])return;const i=null==e?void 0:e.apiId;if(i&&await(0,g.hasAPIMigrated)(i))return;const n=w.get(this._findItem(o),"data");this.updateLoadingPublishStateForEntity(t,!0);let a=await(0,f.fetchPublishedData)(t);a=w.get(a,"body.collections");const o={uid:t,type:D.DOCUMENTATION_ENTITY.COLLECTION,versionTag:D.DOCUMENTATION_LATEST_VERSION_STRING};n&&(n.publishedData=a,this._updateData(o,n)),this.updateLoadingPublishStateForEntity(t,!1)}catch(e){this.updateLoadingPublishStateForEntity(t,!1),pm.logger.error(`DocumentationMasterStore~_fetchPublishedData: error in fetching published data for collection with uid - ${t}`)}}_transformData(t,e){const i=t.folders,n=t.requests,a=t.responses;function o(t){const e=i.find((e=>e.id===t)),n=e.folders_order.map((t=>o(t))),a=e.order.map((t=>r(t)));return{...e,folders:n,requests:a,type:D.DOCUMENTATION_ENTITY.FOLDER}}function r(t){const e=n.find((e=>e.id===t));return{...e,responses:e.responses,type:D.DOCUMENTATION_ENTITY.REQUEST}}return{...t,uid:t.id,folders:e!==D.DOCUMENTATION_ENTITY.REQUEST?t.folders_order.map((t=>o(t))):void 0,requests:e!==D.DOCUMENTATION_ENTITY.REQUEST?t.order.map((t=>r(t))):void 0,responses:e===D.DOCUMENTATION_ENTITY.REQUEST?a:void 0,type:D.DOCUMENTATION_ENTITY.COLLECTION}}_updateStatus(t,e){const{uid:i,type:n,versionTag:a}=t,o=`${i}:${a}`;let r;switch(n){case D.DOCUMENTATION_ENTITY.COLLECTION:r=this.collections;break;case D.DOCUMENTATION_ENTITY.FOLDER:r=this.folders;break;case D.DOCUMENTATION_ENTITY.REQUEST:r=this.requests;break;default:throw new TypeError(`DocumentationMasterStore~_updateStatus: unknown entity type - ${n}`)}if(!r[o])throw new Error(`DocumentationMasterStore~_updateStatus: entry found for uid - ${i}, type - ${n}, versionTag - ${a}. Initialize state using _createInitialState method.`);r[o].status=e}updateLoadingStateForEntity(t,e){this.loadingStateForEntity[t]=e}updateLoadingPublishStateForEntity(t,e){this.loadingPublishedStateForEntity[t]=e}_updateData(t,e){const{uid:i,type:n,versionTag:a}=t,o=`${i}:${a}`;let r;switch(n){case D.DOCUMENTATION_ENTITY.COLLECTION:r=this.collections;break;case D.DOCUMENTATION_ENTITY.FOLDER:r=this.folders;break;case D.DOCUMENTATION_ENTITY.REQUEST:r=this.requests;break;default:throw new TypeError(`DocumentationMasterStore~_updateData: unknown entity type - ${n}`)}if(!r[o])throw new Error(`DocumentationMasterStore~_updateData: no entry found for uid - ${i}, type - ${n}, versionTag - ${a}. Initialize state using _createInitialState method.`);r[o].data=e}updateName(t,e){const{type:i,uid:n,apiId:a,parentCollectionUid:o}=t;let r;switch(i){case D.DOCUMENTATION_ENTITY.COLLECTION:r=this.isAPIOnBranch[a]?this._findADPInstance(i,o,n):m.updateCollection;break;case D.DOCUMENTATION_ENTITY.FOLDER:r=this.isAPIOnBranch[a]?this._findADPInstance(i,o,n):b.updateFolder;break;case D.DOCUMENTATION_ENTITY.REQUEST:r=this.isAPIOnBranch[a]?this._findADPInstance(i,o,n):A.updateRequest;break;default:throw new TypeError(`DocumentationMasterStore~updateName: unknown entity type - ${i}`)}return r(n,{name:e})}_findADPInstance(t,e,i){let n=null;switch(t){case D.DOCUMENTATION_ENTITY.COLLECTION:n=this.collectionInstance[e];break;case D.DOCUMENTATION_ENTITY.FOLDER:{const{modelId:t}=(0,L.decomposeUID)(i);n=v.default.find(t);break}case D.DOCUMENTATION_ENTITY.REQUEST:{const{modelId:t}=(0,L.decomposeUID)(i);n=M.default.find(t);break}default:pm.logger.error(`DocumentationMasterStore~_findADPInstance: unknown entity type - ${t}`)}return n||pm.logger.error(`DocumentationMasterStore~_findADPInstance: Unable to find modelInstance for ${t}:${i}`),(t,e)=>n.update({...n.model,...e})}async updateDescription(t,e){const{type:i,uid:n,apiId:a,parentCollectionUid:o}=t;let r;switch(i){case D.DOCUMENTATION_ENTITY.COLLECTION:r=this.isAPIOnBranch[a]?this._findADPInstance(i,o,n):m.updateCollection;break;case D.DOCUMENTATION_ENTITY.FOLDER:r=this.isAPIOnBranch[a]?this._findADPInstance(i,o,n):b.updateFolder;break;case D.DOCUMENTATION_ENTITY.REQUEST:r=this.isAPIOnBranch[a]?this._findADPInstance(i,o,n):A.updateRequest;break;default:throw new TypeError(`DocumentationMasterStore~updateName: unknown entity type - ${i}`)}return r(n,{description:e})}get activeWorkspaceId(){return(0,p.resolveStoreInstance)(N.default).id}},u.instance=void 0,a=k((n=u).prototype,"collections",[T.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{}}}),o=k(n.prototype,"folders",[T.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{}}}),r=k(n.prototype,"requests",[T.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{}}}),s=k(n.prototype,"loadingStateForEntity",[T.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{}}}),c=k(n.prototype,"collectionInstance",[T.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{}}}),l=k(n.prototype,"environmentVariables",[T.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return null}}),d=k(n.prototype,"loadingPublishedStateForEntity",[T.observable],{configurable:!0,enumerable:!0,writable:!0,initializer:function(){return{}}}),k(n.prototype,"isOffline",[T.computed],Object.getOwnPropertyDescriptor(n.prototype,"isOffline"),n.prototype),k(n.prototype,"isEditable",[T.computed],Object.getOwnPropertyDescriptor(n.prototype,"isEditable"),n.prototype),k(n.prototype,"setEnvironmentVariable",[T.action],Object.getOwnPropertyDescriptor(n.prototype,"setEnvironmentVariable"),n.prototype),k(n.prototype,"_updateStatus",[T.action],Object.getOwnPropertyDescriptor(n.prototype,"_updateStatus"),n.prototype),k(n.prototype,"updateLoadingStateForEntity",[T.action],Object.getOwnPropertyDescriptor(n.prototype,"updateLoadingStateForEntity"),n.prototype),k(n.prototype,"updateLoadingPublishStateForEntity",[T.action],Object.getOwnPropertyDescriptor(n.prototype,"updateLoadingPublishStateForEntity"),n.prototype),k(n.prototype,"_updateData",[T.action],Object.getOwnPropertyDescriptor(n.prototype,"_updateData"),n.prototype),k(n.prototype,"activeWorkspaceId",[T.computed],Object.getOwnPropertyDescriptor(n.prototype,"activeWorkspaceId"),n.prototype),n)}}]);