const{EventEmitter:EventEmitter}=require("events"),{PMBuffer:PMBuffer}=require("./PMBuffer"),{serialize:serialize,deserialize:deserialize}=require("./serialization");class CommunicationChannel extends EventEmitter{constructor(e,s){super(),this.protocol=e,this._logger=s,this.protocol.onMessage((e=>this.onBuffer(e))),this.protocol.onClose((()=>this.emit("close")))}dispose(){this.protocol.dispose()}send(e){const s=PMBuffer.wrap(serialize(e,this._logger));return this.sendBuffer(s)}onMessage(e){return this.on("message",e),{dispose:()=>this.removeListener("message",e)}}sendBuffer(e){try{return this.protocol.send(e),e.byteLength}catch(e){return 0}}onBuffer(e){const s=deserialize(e,this._logger);this.emit("message",s)}onClose(e){return this.on("close",e),{dispose:()=>this.removeListener("close",e)}}}module.exports={CommunicationChannel:CommunicationChannel};