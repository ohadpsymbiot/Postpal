const{PMBuffer:PMBuffer}=require("./PMBuffer");class NodeSocket{constructor(e,o){this.socket=e,this._logger=o}dispose(){try{this.socket.destroy()}catch(e){this._logger.error("NodeSocket~dispose~Could not destroy socket",e)}}onData(e){const o=o=>e(PMBuffer.wrap(o));return this.socket.on("data",o),{dispose:()=>this.socket.off("data",o)}}onClose(e){return this.socket.on("close",e),{dispose:()=>this.socket.off("close",e)}}write(e){if(!this.socket.destroyed)try{this.socket.write(e.buffer)}catch(e){if("EPIPE"===e.code)return;this._logger.error("NodeSocket~write~Failedto write data",e)}}end(){try{this.socket.end()}catch(e){this._logger.error("NodeSocket~end~Could not end socket",e)}}}module.exports={NodeSocket:NodeSocket};